# -*- coding: utf-8 -*-
"""assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KA0PsUEGLcAq82lTzPXLXE4JXCaEnsU5
"""



"""Write a Rectangle class in Python language, allowing you to build a rectangle with length and width attributes.Create a Perimeter() method to calculate the perimeter of the rectangle and a Area() method to calculate the area of ​​the rectangle.Create a method display() that display the length, width, perimeter and area of an object created using an instantiation on rectangle class.Create a Parallelepipede child class inheriting from the Rectangle class and with a height attribute and another Volume() method to calculate the volume of the Parallelepiped."""

class Rectangle:
  def length(self,l):
    self.length=l
    print('length:',self.length)
  def width(self,w):
    self.width=w
    print('width:',self.width)
  def area(self):
    self.area=self.width*self.length
    print('area:',self.area)
  def perimeter(self):
    self.perimeter=2*(self.width + self.length)
    print('perimeter:',self.perimeter)
  def display(self):
    print('length:',self.length,'width:',self.width,'area:',self.area,'perimeter:',self.perimeter)

class Para(Rectangle):
  def height(self,h):
    self.height=h
  def volume(self):
    self.volume=(self.area * self.height)

r1=Para()

r1.length(15)

r1.width(8)

r1.area()

r1.perimeter()

r1.display()

r1.height(22)

r1.volume()

print(r1.volume)

"""Create a Python class Person with attributes: name and age of type string.Create a display() method that displays the name and age of an object created via the Person class.Create a child class Student  which inherits from the Person class and which also has a section attribute.Create a method displayStudent() that displays the name, age and section of an object created via the Student class.Create a student object via an instantiation on the Student class and then test the displayStudent method."""

class Person:
  def name(self):
    self.name=input('enter name :')
  def age(self):
    self.age=input('age:')
  def display(self):
    print('name:',self.name,'age:',self.age)

class Student(Person):
  def section(self):
    self.section=input('enter section:')
  def display(self):
    print('name:',self.name,'age:',self.age,'section:',self.section)

s1=Person()

s1.name()
s1.age()
s1.display()

s2=Student()

s2.name()
s2.age()
s2.section()
s2.display()

""" Define a Book class with the following attributes: Title, Author (Full name), Price.Define a constructor used to initialize the attributes of the method with values entered by the user.Set the View() method to display information for the current book.Write a program to testing the Book class"""

class Book:
  def __init__(self):
    self.title=input('enter book name:')
    self.author=input('enter author name:')
    self.price=float(input('enter price:'))
  def view(self):
    print('title:',self.title,'author:',self.author,'price:',self.price)

b1=Book()

b1.view()

"""Create a class called TK_extended which inherits from TK class and having the attributes:
- Master: that represents the name of the main window
- title: that represents the title of the main window
2 - Create a method called create() that creates the window
3 - Create a method called resize(width, height) that can resize the window.
4 - Create a method called generate() to generate the window
"""

class TK:
  def master(self)
  def title(self)
class TK_extended(Tk):
  def create(self)
  def resize(self,w,l)
  def generate(self)

"""Create a child class Bus that will inherit all of the variables and methods of the Vehicle class. In the vehicle class create relevant methods and variables. Define a property that must have the same value for every class instance (object). Define a class attribute "color” with a default value white. I.e., Every Vehicle should be white.

"""

class Vehicle:
  def __init__(self,c='white'):
    self.wheels=int(input('no of wheels:'))
    self.colour=c
class Bus(Vehicle):
  def info(self):
    self.length=float(input('lenght:'))
    self.brand=input('enter brand name:')
  def display(self):
    print('no of wheels:',self.wheels,'colour:',self.colour,'length:',self.length,'brand:',self.brand)

bus=Bus()

bus.info()

bus.display()

"""Create a Python class called BankAccount which represents a bank account, having as attributes: accountNumber (numeric type), name (name of the account owner as string type), balance.Create a constructor with parameters: accountNumber, name, balance.Create a Deposit() method which manages the deposit actions.Create a Withdrawal() method  which manages withdrawals actions.Create an bankFees() method to apply the bank fees with a percentage of 5% of the balance account.Create a display() method to display account details.Give the complete code for the  BankAccount class."""

accno=20220400
class bankacc:
  def __init__(self):
    self.accountno=int(input())
    print('your account number:',self.accountno)
    self.name=input('enter your name')
    self.balance=float(input('enter a amount:'))
  def deposit(self):
    depo=float(input('enter amount to deposit:'))
    self.balance+=depo
    print('total balance:',self.balance,'deposit:',depo)
  def withdrawal(self):
    wit=float(input('enter amount to withdrawal:'))
    self.balance-=wit
    print('withdrawal:',wit,'total balance:',self.balance)
  def bankfees(self):
    self.balance*=0.95
  def display(self):
    print('account number:',self.accountno,'account owner name: ',self.name,'account balance:',self.balance)

q1=bankacc()

q1.deposit()

q1.withdrawal()

q1.bankfees()

q1.display()

